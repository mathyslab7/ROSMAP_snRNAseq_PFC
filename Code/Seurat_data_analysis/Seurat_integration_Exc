#Scanpy
python
import numpy as np
import pandas as pd
import scanpy as sc
from anndata import read_h5ad
adata =read_h5ad('./Ex_raw.h5ad')
adata.raw=adata
sc.pp.normalize_total(adata, target_sum=1e4)
sc.pp.log1p(adata)
sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5,n_top_genes=5000)
adata_raw=sc.AnnData(X=adata.raw.X, obs=adata.obs, var=adata.var)
adata_raw = adata_raw[:, adata_raw.var.highly_variable]
del adata_raw.var['highly_variable']
adata_raw.write('Ex_raw_highly_variable.h5ad')

########################################################################################
library(Seurat)
adata <- ReadH5AD(file = "Ex_raw_highly_variable.h5ad")
pbmc <- CreateSeuratObject(counts = GetAssayData(object = adata, slot = 'counts'), project = "pbmc3k", min.cells = 0, min.features = 0)
pbmc=AddMetaData(pbmc,adata@meta.data)
saveRDS(pbmc,file="Ex_raw_highly_variable.rds")

########################################################################################
library(Seurat)
pbmc <- readRDS(file = "Ex_raw_highly_variable.rds")
pbmc.list <- SplitObject(pbmc, split.by = "batch.annotation")
for (i in names(pbmc.list)) {
 pbmc.list[[i]] <- SCTransform(pbmc.list[[i]], verbose = FALSE,variable.features.n = 1000
 )
 }
pbmc.features <- SelectIntegrationFeatures(object.list = pbmc.list, nfeatures = 1000)
pbmc.list <- PrepSCTIntegration(object.list = pbmc.list, anchor.features = pbmc.features)
options(future.globals.maxSize = 50000 * 1024^2)
rm(pbmc)
k.filter <- min(200, min(sapply(pbmc.list, ncol)))
pbmc.anchors <- FindIntegrationAnchors(object.list = pbmc.list, normalization.method = "SCT",anchor.features = pbmc.features,reference = c(2),k.filter = k.filter,verbose = TRUE)
saveRDS(pbmc.anchors,file="Ex_raw_highly_variable_batch_intermediate.rds")

########################################################################################
library(Seurat)
pbmc <- readRDS(file = "Ex_raw_highly_variable_batch_intermediate.rds")
pbmc.integrated <- IntegrateData(anchorset = pbmc, normalization.method = "SCT")
pbmc.integrated <- RunPCA(object = pbmc.integrated, verbose = FALSE)
pbmc.integrated <- RunUMAP(object = pbmc.integrated, dims = 1:40,n.neighbors = 100,min.dist = 0.1)
pbmc.integrated <- FindNeighbors(pbmc.integrated, dims = 1:40, verbose = FALSE)
saveRDS(pbmc.integrated,file="Ex_raw_highly_variable_integrated_batch1000.rds")

########################################################################################
library(Seurat)
pbmc <- readRDS(file = "Ex_raw_highly_variable_integrated_batch1000.rds")
pbmc <- FindClusters(pbmc, verbose = FALSE,resolution=1,algorithm=4,weights=T,method='igraph')
saveRDS(pbmc,file="Ex_raw_highly_variable_integrated_batch1000_leiden_res1.rds")

########################################################################################
library(Seurat)
pbmc <- readRDS(file = "Ex_raw_highly_variable_integrated_batch1000_leiden_res1.rds")
write.csv(pbmc@meta.data,file="Ex_raw_highly_variable_integrated_batch1000_leiden_res1_metadata.csv")
addition=read.table("Ex_raw_highly_variable_integrated_batch1000_leiden_res1_addition_scanpy.txt",header=TRUE,row.names=1,sep="\t")
pbmc=AddMetaData(pbmc,addition)
Idents(pbmc)<-"cell_type_high_resolution"
DimPlot(pbmc,label=TRUE)
saveRDS(pbmc,file="Ex_raw_highly_variable_integrated_batch1000_final.rds")
