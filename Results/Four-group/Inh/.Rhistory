DefaultAssay(pbmc_sub) <- "RNA"
pbmc.sce <- as.SingleCellExperiment(pbmc_sub)
rm(pbmc_sub)
# remove undetected genes
pbmc.sce <- pbmc.sce[rowSums(counts(pbmc.sce) > 0) > 0, ]
dim(pbmc.sce)
# remove lowly expressed genes
pbmc.sce <- pbmc.sce[rowSums(counts(pbmc.sce) > 1) >= 10, ]
dim(pbmc.sce)
sce <- prepSCE(pbmc.sce,
kid = "major_cell_type", # subpopulation assignments
gid = "AD",  # group IDs (ctrl/stim)
sid = "projid",   # sample IDs (ctrl/stim.1234)
drop = FALSE)  # dr
nk <- length(kids <- levels(sce$cluster_id))
ns <- length(sids <- levels(sce$sample_id))
names(kids) <- kids; names(sids) <- sids
#t(table(sce$cluster_id, sce$sample_id))
pb <- aggregateData(sce,
assay = "counts", fun = "sum",
by = c("cluster_id", "sample_id"))
assayNames(pb)
#t(head(assay(pb)))
rm(sce)
rm(pbmc.sce)
#################
#define initial formula
formula <- ~four_group_var+ pmi+ age_death+ msex
cd <- as.data.frame(colData(pb))
cd2 <- cd[,c("four_group_var","pmi","age_death","msex")]
design <- model.matrix(formula,cd2)
pb2 <- pb[,rownames(design)]
#################
#estimate unwanted vaiations using RUVseq
counts <- pb2@assays@data@listData[[celltype]]
genes <- rownames(counts)
four_group_var <- pb2@colData@listData[["four_group_var"]]
set <- newSeqExpressionSet(as.matrix(counts),
phenoData = data.frame(four_group_var, row.names=pb2@colData@rownames))
set
design <- model.matrix(~four_group_var, data=pData(set))
y <- DGEList(counts=counts(set))
y <- calcNormFactors(y, method="TMM")
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmFit(y, design)
res <- residuals(fit, type="deviance")
set4 <- RUVr(set, genes, k=10, res)
w=pData(set4)
pb2$w_1 <- w$W_1
pb2$w_2 <- w$W_2
pb2$w_3 <- w$W_3
pb2$w_4 <- w$W_4
pb2$w_5 <- w$W_5
pb2$w_6 <- w$W_6
pb2$w_7 <- w$W_7
pb2$w_8 <- w$W_8
pb2$w_9 <- w$W_9
pb2$w_10 <- w$W_10
#################
#muscat DE analysis
formula <- ~four_group_var+pmi+age_death+msex+w_1+w_2+w_3+w_4+w_5+w_6+w_7+w_8+w_9+w_10
cd <- as.data.frame(colData(pb2))
cd2 <- cd[,c("four_group_var","pmi","age_death","msex","w_1","w_2","w_3","w_4","w_5","w_6","w_7","w_8","w_9","w_10")]
design <- model.matrix(formula,cd2)
res <- pbDS(pb2,design = design,coef=as.list(2:4))
celltype <- gsub("/", "_", celltype)
#Define output directory
outdir <- paste0(dir, "/" , celltype)
dir.create(outdir)
setwd(outdir)
tbl <- res$table[[1]]
DEG_tbl <- tbl[[1]]
filename <- paste0(celltype,"_", "group_fourth_vs_third.csv")
write.csv(DEG_tbl, file= filename)
}
}
for (k in 1:length(subset_list)){
subset <- subset_list[[k]]
setwd("G:/PFC_429_final_Spring2021/Data/Data_DecontX/Combined_by_cell_classes")
pbmc <- readRDS(subset)
setwd("G:/PFC_429_final_Spring2021/Vanshika")
Off_metadata <- read.csv("dataset_652_basic_04-23-2020.csv") #Add official metadata
Off_metadata <- Off_metadata %>%
mutate(AD = case_when(niareagansc == 1 ~ 1,
niareagansc == 2 ~ 1,
niareagansc == 3 ~ 0,
niareagansc == 4 ~ 0))
CRscores <- read.csv("CR_scores.csv") #Add CR score variables
tangle_CRscores <- read.csv("PFC427_tangles_CR_score.csv") #Add tangle CR score variables
CDRscores <- read.csv("PFC427_CDR_scores.csv") #Add CDR score variables
Combined_metadata <- left_join(CRscores, Off_metadata, by= "projid")
Combined_metadata <- left_join(Combined_metadata, tangle_CRscores, by= "projid")
Combined_metadata <- left_join(Combined_metadata, CDRscores, by= "projid")
#define four_group_variable (comparing Group-3 vs Group-1)
MD <- Combined_metadata[,c("projid", "AD", "cogdx")]
MD <- MD %>% mutate(four_group_var = case_when(AD == 0 & cogdx == 1 ~ "1", #Group-1
AD == 0 & cogdx == 4 ~ "", #Group-2
AD == 1 & cogdx == 1 ~ "2", #Group-3
AD == 1 & cogdx == 4 ~ ""  #Group-4
))
MD$four_group_var <- as.numeric(MD$four_group_var)
MD <- MD[,c(1,4)]
Combined_metadata <- left_join(Combined_metadata, MD, by= "projid")
data <- pbmc@meta.data
data <- data[,"projid",drop=FALSE]
New_metadata <- left_join(data, Combined_metadata, by="projid")
row.names(New_metadata) <- row.names(data)
pbmc <- AddMetaData(pbmc, metadata = New_metadata)
Idents(pbmc)= "four_group_var"
pbmc <- subset(pbmc, idents = c("1","2"))
#Add MCT info
HM <- pbmc@meta.data
HM2 <- HM[,c("projid","cell_type_high_resolution")]
HM3 <- HM2 %>% mutate(major_cell_type = case_when(grepl("Exc",cell_type_high_resolution)~"Exc",
grepl("CA1 pyramidal cells",cell_type_high_resolution)~"Exc",
grepl("CA2, CA3 pyramidal cells",cell_type_high_resolution)~"Exc",
grepl("DG granule cells",cell_type_high_resolution)~"Exc",
grepl("Inh",cell_type_high_resolution)~"Inh",
grepl("Ast",cell_type_high_resolution)~"Ast",
grepl("Oli",cell_type_high_resolution)~"Oli",
grepl("OPC",cell_type_high_resolution)~"OPC",
grepl("Mic",cell_type_high_resolution)~"Mic",
grepl("CAMs",cell_type_high_resolution)~"CAMs",
grepl("CPEC",cell_type_high_resolution)~"CPEC",
grepl("End",cell_type_high_resolution)~"End",
grepl("Epd",cell_type_high_resolution)~"Epd",
grepl("Fib",cell_type_high_resolution)~"Fib",
grepl("Per",cell_type_high_resolution)~"Per",
grepl("SMC",cell_type_high_resolution)~"SMC",
grepl("T cells",cell_type_high_resolution)~"T cells"))
HM4 <- HM3[,-1]
HM5 <- HM4[,-1,drop=FALSE]
pbmc <- AddMetaData(pbmc,HM5)
#################
#Split into individual cell types
Idents(pbmc) <- "major_cell_type"
celltypes <- na.omit(unique(pbmc$major_cell_type))
#remove celltypes with less than 1000 cells
celltypes_filtered <- data.frame(table(pbmc$major_cell_type))
celltypes_filtered <- subset(celltypes_filtered, celltypes_filtered$Freq <1000)
celltypes <- celltypes[! celltypes %in% celltypes_filtered$Var1]
for (j in 1:length(celltypes)){
pbmc_sub <- subset(pbmc, idents = celltypes[[j]])
celltype <- celltypes[[j]]
DefaultAssay(pbmc_sub) <- "RNA"
pbmc.sce <- as.SingleCellExperiment(pbmc_sub)
rm(pbmc_sub)
# remove undetected genes
pbmc.sce <- pbmc.sce[rowSums(counts(pbmc.sce) > 0) > 0, ]
dim(pbmc.sce)
# remove lowly expressed genes
pbmc.sce <- pbmc.sce[rowSums(counts(pbmc.sce) > 1) >= 10, ]
dim(pbmc.sce)
sce <- prepSCE(pbmc.sce,
kid = "major_cell_type", # subpopulation assignments
gid = "AD",  # group IDs (ctrl/stim)
sid = "projid",   # sample IDs (ctrl/stim.1234)
drop = FALSE)  # dr
nk <- length(kids <- levels(sce$cluster_id))
ns <- length(sids <- levels(sce$sample_id))
names(kids) <- kids; names(sids) <- sids
#t(table(sce$cluster_id, sce$sample_id))
pb <- aggregateData(sce,
assay = "counts", fun = "sum",
by = c("cluster_id", "sample_id"))
assayNames(pb)
#t(head(assay(pb)))
rm(sce)
rm(pbmc.sce)
#################
#define initial formula
formula <- ~four_group_var+ pmi+ age_death+ msex
cd <- as.data.frame(colData(pb))
cd2 <- cd[,c("four_group_var","pmi","age_death","msex")]
design <- model.matrix(formula,cd2)
pb2 <- pb[,rownames(design)]
#################
#estimate unwanted vaiations using RUVseq
counts <- pb2@assays@data@listData[[celltype]]
genes <- rownames(counts)
four_group_var <- pb2@colData@listData[["four_group_var"]]
set <- newSeqExpressionSet(as.matrix(counts),
phenoData = data.frame(four_group_var, row.names=pb2@colData@rownames))
set
design <- model.matrix(~four_group_var, data=pData(set))
y <- DGEList(counts=counts(set))
y <- calcNormFactors(y, method="TMM")
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmFit(y, design)
res <- residuals(fit, type="deviance")
set4 <- RUVr(set, genes, k=10, res)
w=pData(set4)
pb2$w_1 <- w$W_1
pb2$w_2 <- w$W_2
pb2$w_3 <- w$W_3
pb2$w_4 <- w$W_4
pb2$w_5 <- w$W_5
pb2$w_6 <- w$W_6
pb2$w_7 <- w$W_7
pb2$w_8 <- w$W_8
pb2$w_9 <- w$W_9
pb2$w_10 <- w$W_10
#################
#muscat DE analysis
formula <- ~four_group_var+pmi+age_death+msex+w_1+w_2+w_3+w_4+w_5+w_6+w_7+w_8+w_9+w_10
cd <- as.data.frame(colData(pb2))
cd2 <- cd[,c("four_group_var","pmi","age_death","msex","w_1","w_2","w_3","w_4","w_5","w_6","w_7","w_8","w_9","w_10")]
design <- model.matrix(formula,cd2)
res <- pbDS(pb2,design = design,coef=as.list(2:4))
celltype <- gsub("/", "_", celltype)
#Define output directory
outdir <- paste0(dir, "/" , celltype)
dir.create(outdir)
setwd(outdir)
tbl <- res$table[[1]]
DEG_tbl <- tbl[[1]]
filename <- paste0(celltype,"_", "group_third_vs_first.csv")
write.csv(DEG_tbl, file= filename)
}
}
for (k in 1:length(subset_list)){
subset <- subset_list[[k]]
setwd("G:/PFC_429_final_Spring2021/Data/Data_DecontX/Combined_by_cell_classes")
pbmc <- readRDS(subset)
setwd("G:/PFC_429_final_Spring2021/Vanshika")
Off_metadata <- read.csv("dataset_652_basic_04-23-2020.csv") #Add official metadata
Off_metadata <- Off_metadata %>%
mutate(AD = case_when(niareagansc == 1 ~ 1,
niareagansc == 2 ~ 1,
niareagansc == 3 ~ 0,
niareagansc == 4 ~ 0))
CRscores <- read.csv("CR_scores.csv") #Add CR score variables
tangle_CRscores <- read.csv("PFC427_tangles_CR_score.csv") #Add tangle CR score variables
CDRscores <- read.csv("PFC427_CDR_scores.csv") #Add CDR score variables
Combined_metadata <- left_join(CRscores, Off_metadata, by= "projid")
Combined_metadata <- left_join(Combined_metadata, tangle_CRscores, by= "projid")
Combined_metadata <- left_join(Combined_metadata, CDRscores, by= "projid")
#define four_group_variable (comparing Group-4 vs Group-2)
MD <- Combined_metadata[,c("projid", "AD", "cogdx")]
MD <- MD %>% mutate(four_group_var = case_when(AD == 0 & cogdx == 1 ~ "", #Group-1
AD == 0 & cogdx == 4 ~ "1", #Group-2
AD == 1 & cogdx == 1 ~ "", #Group-3
AD == 1 & cogdx == 4 ~ "2"  #Group-4
))
MD$four_group_var <- as.numeric(MD$four_group_var)
MD <- MD[,c(1,4)]
Combined_metadata <- left_join(Combined_metadata, MD, by= "projid")
data <- pbmc@meta.data
data <- data[,"projid",drop=FALSE]
New_metadata <- left_join(data, Combined_metadata, by="projid")
row.names(New_metadata) <- row.names(data)
pbmc <- AddMetaData(pbmc, metadata = New_metadata)
Idents(pbmc)= "four_group_var"
pbmc <- subset(pbmc, idents = c("1","2"))
#Add MCT info
HM <- pbmc@meta.data
HM2 <- HM[,c("projid","cell_type_high_resolution")]
HM3 <- HM2 %>% mutate(major_cell_type = case_when(grepl("Exc",cell_type_high_resolution)~"Exc",
grepl("CA1 pyramidal cells",cell_type_high_resolution)~"Exc",
grepl("CA2, CA3 pyramidal cells",cell_type_high_resolution)~"Exc",
grepl("DG granule cells",cell_type_high_resolution)~"Exc",
grepl("Inh",cell_type_high_resolution)~"Inh",
grepl("Ast",cell_type_high_resolution)~"Ast",
grepl("Oli",cell_type_high_resolution)~"Oli",
grepl("OPC",cell_type_high_resolution)~"OPC",
grepl("Mic",cell_type_high_resolution)~"Mic",
grepl("CAMs",cell_type_high_resolution)~"CAMs",
grepl("CPEC",cell_type_high_resolution)~"CPEC",
grepl("End",cell_type_high_resolution)~"End",
grepl("Epd",cell_type_high_resolution)~"Epd",
grepl("Fib",cell_type_high_resolution)~"Fib",
grepl("Per",cell_type_high_resolution)~"Per",
grepl("SMC",cell_type_high_resolution)~"SMC",
grepl("T cells",cell_type_high_resolution)~"T cells"))
HM4 <- HM3[,-1]
HM5 <- HM4[,-1,drop=FALSE]
pbmc <- AddMetaData(pbmc,HM5)
#################
#Split into individual cell types
Idents(pbmc) <- "major_cell_type"
celltypes <- na.omit(unique(pbmc$major_cell_type))
#remove celltypes with less than 1000 cells
celltypes_filtered <- data.frame(table(pbmc$major_cell_type))
celltypes_filtered <- subset(celltypes_filtered, celltypes_filtered$Freq <1000)
celltypes <- celltypes[! celltypes %in% celltypes_filtered$Var1]
for (j in 1:length(celltypes)){
pbmc_sub <- subset(pbmc, idents = celltypes[[j]])
celltype <- celltypes[[j]]
DefaultAssay(pbmc_sub) <- "RNA"
pbmc.sce <- as.SingleCellExperiment(pbmc_sub)
rm(pbmc_sub)
# remove undetected genes
pbmc.sce <- pbmc.sce[rowSums(counts(pbmc.sce) > 0) > 0, ]
dim(pbmc.sce)
# remove lowly expressed genes
pbmc.sce <- pbmc.sce[rowSums(counts(pbmc.sce) > 1) >= 10, ]
dim(pbmc.sce)
sce <- prepSCE(pbmc.sce,
kid = "major_cell_type", # subpopulation assignments
gid = "AD",  # group IDs (ctrl/stim)
sid = "projid",   # sample IDs (ctrl/stim.1234)
drop = FALSE)  # dr
nk <- length(kids <- levels(sce$cluster_id))
ns <- length(sids <- levels(sce$sample_id))
names(kids) <- kids; names(sids) <- sids
#t(table(sce$cluster_id, sce$sample_id))
pb <- aggregateData(sce,
assay = "counts", fun = "sum",
by = c("cluster_id", "sample_id"))
assayNames(pb)
#t(head(assay(pb)))
rm(sce)
rm(pbmc.sce)
#################
#define initial formula
formula <- ~four_group_var+ pmi+ age_death+ msex
cd <- as.data.frame(colData(pb))
cd2 <- cd[,c("four_group_var","pmi","age_death","msex")]
design <- model.matrix(formula,cd2)
pb2 <- pb[,rownames(design)]
#################
#estimate unwanted vaiations using RUVseq
counts <- pb2@assays@data@listData[[celltype]]
genes <- rownames(counts)
four_group_var <- pb2@colData@listData[["four_group_var"]]
set <- newSeqExpressionSet(as.matrix(counts),
phenoData = data.frame(four_group_var, row.names=pb2@colData@rownames))
set
design <- model.matrix(~four_group_var, data=pData(set))
y <- DGEList(counts=counts(set))
y <- calcNormFactors(y, method="TMM")
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmFit(y, design)
res <- residuals(fit, type="deviance")
set4 <- RUVr(set, genes, k=10, res)
w=pData(set4)
pb2$w_1 <- w$W_1
pb2$w_2 <- w$W_2
pb2$w_3 <- w$W_3
pb2$w_4 <- w$W_4
pb2$w_5 <- w$W_5
pb2$w_6 <- w$W_6
pb2$w_7 <- w$W_7
pb2$w_8 <- w$W_8
pb2$w_9 <- w$W_9
pb2$w_10 <- w$W_10
#################
#muscat DE analysis
formula <- ~four_group_var+pmi+age_death+msex+w_1+w_2+w_3+w_4+w_5+w_6+w_7+w_8+w_9+w_10
cd <- as.data.frame(colData(pb2))
cd2 <- cd[,c("four_group_var","pmi","age_death","msex","w_1","w_2","w_3","w_4","w_5","w_6","w_7","w_8","w_9","w_10")]
design <- model.matrix(formula,cd2)
res <- pbDS(pb2,design = design,coef=as.list(2:4))
celltype <- gsub("/", "_", celltype)
#Define output directory
outdir <- paste0(dir, "/" , celltype)
dir.create(outdir)
setwd(outdir)
tbl <- res$table[[1]]
DEG_tbl <- tbl[[1]]
filename <- paste0(celltype,"_", "group_fourth_vs_second.csv")
write.csv(DEG_tbl, file= filename)
}
}
for (k in 1:length(subset_list)){
subset <- subset_list[[k]]
setwd("G:/PFC_429_final_Spring2021/Data/Data_DecontX/Combined_by_cell_classes")
pbmc <- readRDS(subset)
setwd("G:/PFC_429_final_Spring2021/Vanshika")
Off_metadata <- read.csv("dataset_652_basic_04-23-2020.csv") #Add official metadata
Off_metadata <- Off_metadata %>%
mutate(AD = case_when(niareagansc == 1 ~ 1,
niareagansc == 2 ~ 1,
niareagansc == 3 ~ 0,
niareagansc == 4 ~ 0))
CRscores <- read.csv("CR_scores.csv") #Add CR score variables
tangle_CRscores <- read.csv("PFC427_tangles_CR_score.csv") #Add tangle CR score variables
CDRscores <- read.csv("PFC427_CDR_scores.csv") #Add CDR score variables
Combined_metadata <- left_join(CRscores, Off_metadata, by= "projid")
Combined_metadata <- left_join(Combined_metadata, tangle_CRscores, by= "projid")
Combined_metadata <- left_join(Combined_metadata, CDRscores, by= "projid")
#define four_group_variable (comparing Group-4 vs Group-1)
MD <- Combined_metadata[,c("projid", "AD", "cogdx")]
MD <- MD %>% mutate(four_group_var = case_when(AD == 0 & cogdx == 1 ~ "1", #Group-1
AD == 0 & cogdx == 4 ~ "", #Group-2
AD == 1 & cogdx == 1 ~ "", #Group-3
AD == 1 & cogdx == 4 ~ "2"  #Group-4
))
MD$four_group_var <- as.numeric(MD$four_group_var)
MD <- MD[,c(1,4)]
Combined_metadata <- left_join(Combined_metadata, MD, by= "projid")
data <- pbmc@meta.data
data <- data[,"projid",drop=FALSE]
New_metadata <- left_join(data, Combined_metadata, by="projid")
row.names(New_metadata) <- row.names(data)
pbmc <- AddMetaData(pbmc, metadata = New_metadata)
Idents(pbmc)= "four_group_var"
pbmc <- subset(pbmc, idents = c("1","2"))
#Add MCT info
HM <- pbmc@meta.data
HM2 <- HM[,c("projid","cell_type_high_resolution")]
HM3 <- HM2 %>% mutate(major_cell_type = case_when(grepl("Exc",cell_type_high_resolution)~"Exc",
grepl("CA1 pyramidal cells",cell_type_high_resolution)~"Exc",
grepl("CA2, CA3 pyramidal cells",cell_type_high_resolution)~"Exc",
grepl("DG granule cells",cell_type_high_resolution)~"Exc",
grepl("Inh",cell_type_high_resolution)~"Inh",
grepl("Ast",cell_type_high_resolution)~"Ast",
grepl("Oli",cell_type_high_resolution)~"Oli",
grepl("OPC",cell_type_high_resolution)~"OPC",
grepl("Mic",cell_type_high_resolution)~"Mic",
grepl("CAMs",cell_type_high_resolution)~"CAMs",
grepl("CPEC",cell_type_high_resolution)~"CPEC",
grepl("End",cell_type_high_resolution)~"End",
grepl("Epd",cell_type_high_resolution)~"Epd",
grepl("Fib",cell_type_high_resolution)~"Fib",
grepl("Per",cell_type_high_resolution)~"Per",
grepl("SMC",cell_type_high_resolution)~"SMC",
grepl("T cells",cell_type_high_resolution)~"T cells"))
HM4 <- HM3[,-1]
HM5 <- HM4[,-1,drop=FALSE]
pbmc <- AddMetaData(pbmc,HM5)
#################
#Split into individual cell types
Idents(pbmc) <- "major_cell_type"
celltypes <- na.omit(unique(pbmc$major_cell_type))
#remove celltypes with less than 1000 cells
celltypes_filtered <- data.frame(table(pbmc$major_cell_type))
celltypes_filtered <- subset(celltypes_filtered, celltypes_filtered$Freq <1000)
celltypes <- celltypes[! celltypes %in% celltypes_filtered$Var1]
for (j in 1:length(celltypes)){
pbmc_sub <- subset(pbmc, idents = celltypes[[j]])
celltype <- celltypes[[j]]
DefaultAssay(pbmc_sub) <- "RNA"
pbmc.sce <- as.SingleCellExperiment(pbmc_sub)
rm(pbmc_sub)
# remove undetected genes
pbmc.sce <- pbmc.sce[rowSums(counts(pbmc.sce) > 0) > 0, ]
dim(pbmc.sce)
# remove lowly expressed genes
pbmc.sce <- pbmc.sce[rowSums(counts(pbmc.sce) > 1) >= 10, ]
dim(pbmc.sce)
sce <- prepSCE(pbmc.sce,
kid = "major_cell_type", # subpopulation assignments
gid = "AD",  # group IDs (ctrl/stim)
sid = "projid",   # sample IDs (ctrl/stim.1234)
drop = FALSE)  # dr
nk <- length(kids <- levels(sce$cluster_id))
ns <- length(sids <- levels(sce$sample_id))
names(kids) <- kids; names(sids) <- sids
#t(table(sce$cluster_id, sce$sample_id))
pb <- aggregateData(sce,
assay = "counts", fun = "sum",
by = c("cluster_id", "sample_id"))
assayNames(pb)
#t(head(assay(pb)))
rm(sce)
rm(pbmc.sce)
#################
#define initial formula
formula <- ~four_group_var+ pmi+ age_death+ msex
cd <- as.data.frame(colData(pb))
cd2 <- cd[,c("four_group_var","pmi","age_death","msex")]
design <- model.matrix(formula,cd2)
pb2 <- pb[,rownames(design)]
#################
#estimate unwanted vaiations using RUVseq
counts <- pb2@assays@data@listData[[celltype]]
genes <- rownames(counts)
four_group_var <- pb2@colData@listData[["four_group_var"]]
set <- newSeqExpressionSet(as.matrix(counts),
phenoData = data.frame(four_group_var, row.names=pb2@colData@rownames))
set
design <- model.matrix(~four_group_var, data=pData(set))
y <- DGEList(counts=counts(set))
y <- calcNormFactors(y, method="TMM")
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmFit(y, design)
res <- residuals(fit, type="deviance")
set4 <- RUVr(set, genes, k=10, res)
w=pData(set4)
pb2$w_1 <- w$W_1
pb2$w_2 <- w$W_2
pb2$w_3 <- w$W_3
pb2$w_4 <- w$W_4
pb2$w_5 <- w$W_5
pb2$w_6 <- w$W_6
pb2$w_7 <- w$W_7
pb2$w_8 <- w$W_8
pb2$w_9 <- w$W_9
pb2$w_10 <- w$W_10
#################
#muscat DE analysis
formula <- ~four_group_var+pmi+age_death+msex+w_1+w_2+w_3+w_4+w_5+w_6+w_7+w_8+w_9+w_10
cd <- as.data.frame(colData(pb2))
cd2 <- cd[,c("four_group_var","pmi","age_death","msex","w_1","w_2","w_3","w_4","w_5","w_6","w_7","w_8","w_9","w_10")]
design <- model.matrix(formula,cd2)
res <- pbDS(pb2,design = design,coef=as.list(2:4))
celltype <- gsub("/", "_", celltype)
#Define output directory
outdir <- paste0(dir, "/" , celltype)
dir.create(outdir)
setwd(outdir)
tbl <- res$table[[1]]
DEG_tbl <- tbl[[1]]
filename <- paste0(celltype,"_", "group_fourth_vs_first.csv")
write.csv(DEG_tbl, file= filename)
}
}
